#!/usr/bin/python
#
# FPGA PADs, generates a file with constants for the pads of a board
# Copyright (C) 2015-2016 INTI, Rodrigo A. Melo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse, yaml, os, sys

bin_dir = os.path.dirname(os.path.abspath(__file__))
if os.path.exists(bin_dir + '/../data'):
   share_dir = bin_dir + '/..'
   lib_dir   = bin_dir
else:
   share_dir = bin_dir + '/../share/fpga-helpers'
   lib_dir   = share_dir

sys.path.insert(0, lib_dir)
from fpga_lib import *

## Parsing the command line ###################################################

version = 'FPGA Pads (FPGA Helpers) v' + getVersion(share_dir)

boards = []
getBoards(boards, share_dir)

parser = argparse.ArgumentParser(
   prog='fpga_pads',
   description='Creates a PACKAGE with constant that represents the PADs of the Board.',
   epilog="Supported boards: " + ', '.join(boards)
)

parser.add_argument(
   '-v', '--version',
   action='version',
   version=version
)

parser.add_argument(
   'board',
   metavar='BOARDNAME|BOARDFILE',
   help='Name of a supported board or file (.yaml) of a new/custom board '
)

parser.add_argument(
   '-o', '--output-dir',
   metavar='PATH',
   default='.',
   help='PATH where to put the resultant file [.]'
)

options = parser.parse_args()

## Processing the options #####################################################

print ('fpga_pads (INFO): ' + version)

if options.board.endswith(".yaml"):
   path = options.board
else:
   path = share_dir + '/data/boards/' + options.board + '.yaml'
if os.path.exists(path):
   board = yaml.load(open(path, 'r'))
else:
   sys.exit('fpga_pads (ERROR): board <' + options.board + '> not exists.')

if 'pads' in board:
   print ('fpga_pads (INFO): <pads> definition was found.')
else:
   sys.exit('fpga_pads (ERROR): board <' + options.board + '> not have PADs definitions.')

if not os.path.exists(options.output_dir):
   os.makedirs(options.output_dir)

name = os.path.basename(options.board)
name = os.path.splitext(name)[0]

fname = options.output_dir + '/' + name + '.vhdl'

comment = "-- "

### Creating the package ######################################################

text = comment + '\n'

if 'name' in board:
   text += comment + (board['name'] + '\n')
else:
   print ('fpga_pads (INFO): <name> not found.')

text += comment + '\n'

if 'doc' in board:
   for line in board['doc'].splitlines():
       text += comment + line + '\n'
   text += comment + '\n'
else:
   print ('fpga_pads (INFO): <doc> not found.')

text += 'package ' + name + ' is\n'

for group in sorted(board['pads']):
    text += '   ' + comment + group.upper() + '\n'
    for pad in sorted(board['pads'][group]):
        text += '   constant ' + "%-20s"% ('PAD_' + pad.upper()) + \
                ' : string:="' + board['pads'][group][pad].upper() + '";\n'
text += 'end package ' + name + ';\n'

## Generating files ###########################################################

text += comment + 'Generated by ' + version
open(fname, 'w').write(text)
print ('fpga_pads (INFO): <' + fname + '> was generated.')
